Ch 9: Store Your Stuff

- How to store your data using a SQLite database
- How to create and manage your own SQLite database 
- How to integrate the SQLite database with your ListView in the TimeTracker app. 

------------------------

- Persist the list data in the SQLite database and display the data from the database, and you'll have 'persistent data storage'.


Storing times in the database: 

1. Create a database for your app.
2. Save a time record. 
3. Load time records.
4. Update the List to use the database. 




----------Start By Creating The Database----------

- SQLiteOpenHelper() = provides you will all of the basic behavior to manage a database. 

- Create a new class (ex. TimeTrackerOpenHelper) that extends SQLiteOpenHelper. There are 3 methods you'll need to implement that describes how to connect to your database, initially create tables, and upgrade from previous versions. 


Example: 

public static class TimeTrackerOpenHelper extends SQliteOpenHelper {
	
	TimeTrackerOpenHelper(Context context) {
		super(context, "timetracker.db", null, 1);        // pass the name of the database to 'super'
	}


	public void onCreate(SQLiteDatabase database) {
		// Create your tables in here
	}


	public void onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) {
		handle database schema upgrades in here
	}

}





----------Instantiate the OpenHelper----------

- The database is created internally by the OpenHelper when it is instantiated. 


- In TimeTracker, add the following line, creating an instance of the TimeTrackerOpenHelper. 

Example: 

public void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.main);

	ListView listView = (ListView)findViewById(R.id.times_list);
	timeTrackerAdapter = new TimeTrackerAdapter();
	listView.setAdapter(timeTrackerAdapter);

	TimeTrackerOpenHelper openHelper = new TimeTrackerOpenHelper(this);        // Instantiating your custom open helper will cause the database to be created. 

}



----------Design The Database----------

- Look at what you need to store and how to structure the database to store that information. 

- The ID field is the primary key for the database. 



----------Create The Initial Table----------

- The database design includes the one 'timerecords' table you'll need to create when the database is created. We overrode the 'onCreate' method in SQLiteOpenHelper when we wrote the TimeTrackerOpenHelper (which created a blank database).

- Include the code to create the intial table: 

create table timerecords (id integer primary key time text, notes text)



----------Updating The Database Creation----------

- Update the 'onCreate' method to the following. You can execute SQL using the execSQL method. 

Example: 

public void onCreate(SQLiteDatabase database) {
	database.execSQL(
		"create table timerecords " +
		"(id integer primary key, time text, notes text)"     // Pass in the SQL statement to create the timerecords table.
	);       
}



- The 'SQLiteOpenHelper' is a helper class for creating and managing the SQLite database.




----------Implementing onUpgrade----------

- If the version number changes in the 'TimeTrackerOpenHelper' constructor, onUpgrade is called for you to update the database as needed. 

- In this case, the upgrade will be quite simple. Just drop the database and recreate it. 

Example: 

TimeTrackerOpenHelper.java...


public class TimeTrackerOpenHelper extends SQLiteOpenHelper {
	super(context, "timetracker.db", null, 2);
}


public void onCreate(SQLiteDatabase database) {
	database.execSQL(
		"CREATE TABLE timerecords " +
		"id INTEGER PRIMARY KEY, time TEXT, notes TEXT)"
	);
}

public void onUpgrade(SQLiteDatabase database, int oldVersion, intNewVersion) {
	database.execSQL("DROP TABLE IF EXISTS timerecords");
	onCreate(database);        // Drop the tables if they exist, and then call 'onCreate'.
}




----------Using The Database In Your App----------


- OpenHelper is not a database, but it creates the database for you, and gives you access to it. 

- You need to call the 'getDatabase' method to retrive a reference to the SQLiteDatabase object. 

- once you have the SQLiteDatabase, you can call any of the methods to insert, delete, execute raw SQL statements, etc. 

- First, you need to get a reference to the database from the 'OpenHelper'.

- There are 2 methods you can call to retrive the database: getReadableDatabase (to retrieve a read only database) and getWritableDatabase (to retrieve a database you can read/write to).



----------You Can Implement Save With execSQL----------

- 'saveTimeRecord' method = saves the time records into the database. 


ExampLe: 

In TimeTrackerDatabaseHelper.java...


public void saveTimeRecord(String time, String notes) {
	database.execSQL("INSERT INTO TIMERECORDS"
		+ " (TIME, NOTES)"
		+ " VALUES ('" + time + "', '" + notes + "')"
};



----------'Insert' Method Is A LOT BETTER----------

- 'insert' takes a parameter called 'ContentValues' consisting of a set of key/value pairs with the table columun name and the value to insert. 

Example: 

public void saveTimeRecord(String time, String notes) {
	ContentValues contentValues = new ContentValues(),
	contentValues.put(TIMETRACKER_COLUMN_TIME, time);
	contentValues.put(TIMETRACKER_COLUMN_NOTES, notes);


	database.insert(TABLE_NAME, null, contentValues);
}



----------Add Database Access To TimeTracker----------

- Remove the TimeTrackerOpenHelper from 'TimeTracker', and replace it with an instance of TimeTrackerOpenHelper with a member variable to reference later. 

Example:

In TimeTracker.java...


public class TimeTracker extends Activity {
	...

	private TimeTrackerDatabaseHelper databaseHelper;

	...


	// Remove the OpenHelper and instantiate the database helper. 


	public void onCreate(Bundle savedInstanceState) {
		...
		databaseHelper = new TimeTrackerDatabaseHelper(this);
		...
	}
}



----------Save New Times To The Database----------

- Add an additional call in 'onActivityResult' to save the new time. Just call the 'addTimeRecord' with the new data after adding it to the list adapter.

Example: 

In TimeTracker.java...


public void onActivityResult(int requestCode, Intent data) {
	...

	databaseHelper.saveTimeRecord(times, notes);
	...
}



----------Remove Old Code----------

- Delete the TimeTrackerOpenHelper.java, because we moved SQLiteOpenHelper inside the TimeTrackerDatabaseHelper isntead.

- Remove the codes in TimeTrackerAdapter.java...

public TimeTrackerAdapter() {
	
}



----------Query The Database----------

- In order to use the stored info, you need to be able to query the database. 

- Just like 'execSQL', SQLiteDatabase has a method called 'rawQuery' that allows you to execute raw String-based SQL queries on the database. 

Example: 

In TimeTrackerDatabaseHelper.java...


public Cursor getAllTimeRecords() {
	return database.rawQuery(
		"select * from " TABLE_NAME,
		null
	);
}



----------SQLite Queries Return Cursors----------

Cursor = an object wrapper around a database result set. Cursor contains columns and rows filled with data.

- The Cursor keeps track of a selected row internally and includes several methods to updata the Cursor's selected row. 



----------Iterating The Cursor----------

- Often, we'll be iterating through a number of results and processing them in bulk.

Example: 

Cursor cursor = helper.getTimeRecordList();     // Query the database using the helper. 

if (cursor.moveToFirst()) {          // Move the cursor to the first row, checking the boolean response before continuing.

	do {
		String time = cursor.getString(1);
		String notes = cursor.getString(2);
		Log.d("DB Value", time + " " + notes);
	} while (cursor.moveToNext());       // Move to next if there are more rows.

}


if (!cursor.isClosed()) {
	cursor.close();
}



----------Use 'CursorAdapter'----------

- The Android SDK includes a special adapter to get a Cursor working with a ListView called 'CursorAdapter'. 

- The CursorAdapter acts as a facilitator between the ListView and the Cursor, to render the contents of the Cursor. 

- CursorAdapter is an abstract class with a few methods needed to override and integrate with your list. 

- CursorAdapter overrides two separate methods. One method, 'newView', inflates the view. The other method, 'bindView', is responsible for populating the view with the selected data. 



----------Update TimeTracker----------

- Since the TimeTrackerAdapter is updated to be a CursorAdapter subclass, all we need to do now is use it to update the TimeTracker Activity. 

- Pass in the context (this), and the Cursor containing the list fo time records to the new adapter. 

Example: 

public void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.main);

	databaseHelper = new TimeTrackerDatabaseHelper(this);

	ListView listView = (ListView)findViewById(R.id.times_list);
	timeTrackerAdapter = new TimeTrackerAdapter(this, databaseHelper.getTimeRecordList());        // Pass in the Cursor and the context to the adapter.
	listView.setAdapter(timeTrackerAdapter);
}



- Remove 'addTimeRecord' and put 'saveTimeRecord' instead. 

Example: 

public void onActivityResult(int requestCode, int resultCode, Intent data) {
	if (requestCode == TIME_ENTRY_REQUEST_CODE) {
		if (resultCode == RESULT_OK) {
			String time = data.getStringExtra(TIME_KEY);
			String notes = data.getStringExtra(NOTES_KEY);

			databaseHelper.saveTimeRecord(time, notes);        // Save the new time record in the database, and update the cursor in the adapter. 

			timeTrackerAdapter.changeCursor(databaseHelper.getTimeRecordList());
		}
	}
}


