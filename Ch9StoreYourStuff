Ch 9: Store Your Stuff

- How to store your data using a SQLite database
- How to create and manage your own SQLite database 
- How to integrate the SQLite database with your ListView in the TimeTracker app. 

------------------------

- Persist the list data in the SQLite database and display the data from the database, and you'll have 'persistent data storage'.


Storing times in the database: 

1. Create a database for your app.
2. Save a time record. 
3. Load time records.
4. Update the List to use the database. 




----------Start By Creating The Database----------

- SQLiteOpenHelper() = provides you will all of the basic behavior to manage a database. 

- Create a new class (ex. TimeTrackerOpenHelper) that extends SQLiteOpenHelper. There are 3 methods you'll need to implement that describes how to connect to your database, initially create tables, and upgrade from previous versions. 


Example: 

public static class TimeTrackerOpenHelper extends SQliteOpenHelper {
	
	TimeTrackerOpenHelper(Context context) {
		super(context, "timetracker.db", null, 1);        // pass the name of the database to 'super'
	}


	public void onCreate(SQLiteDatabase database) {
		// Create your tables in here
	}


	public void onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) {
		handle database schema upgrades in here
	}

}





----------Instantiate the OpenHelper----------

- The database is created internally by the OpenHelper when it is instantiated. 


- In TimeTracker, add the following line, creating an instance of the TimeTrackerOpenHelper. 

Example: 

public void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.main);

	ListView listView = (ListView)findViewById(R.id.times_list);
	timeTrackerAdapter = new TimeTrackerAdapter();
	listView.setAdapter(timeTrackerAdapter);

	TimeTrackerOpenHelper openHelper = new TimeTrackerOpenHelper(this);        // Instantiating your custom open helper will cause the database to be created. 

}



----------Design The Database----------

- Look at what you need to store and how to structure the database to store that information. 

- The ID field is the primary key for the database. 



----------Create The Initial Table----------

- The database design includes the one 'timerecords' table you'll need to create when the database is created. We overrode the 'onCreate' method in SQLiteOpenHelper when we wrote the TimeTrackerOpenHelper (which created a blank database).

- Include the code to create the intial table: 

create table timerecords (id integer primary key time text, notes text)



----------Updating The Database Creation----------

- Update the 'onCreate' method to the following. You can execute SQL using the execSQL method. 

Example: 

public void onCreate(SQLiteDatabase database) {
	database.execSQL(
		"create table timerecords " +
		"(id integer primary key, time text, notes text)"     // Pass in the SQL statement to create the timerecords table.
	);       
}



- The 'SQLiteOpenHelper' is a helper class for creating and managing the SQLite database.




----------Implementing onUpgrade----------

- If the version number changes in the 'TimeTrackerOpenHelper' constructor, onUpgrade is called for you to update the database as needed. 

- In this case, the upgrade will be quite simple. Just drop the database and recreate it. 

Example: 

TimeTrackerOpenHelper.java...


public class TimeTrackerOpenHelper extends SQLiteOpenHelper {
	super(context, "timetracker.db", null, 2);
}


public void onCreate(SQLiteDatabase database) {
	database.execSQL(
		"CREATE TABLE timerecords " +
		"id INTEGER PRIMARY KEY, time TEXT, notes TEXT)"
	);
}

public void onUpgrade(SQLiteDatabase database, int oldVersion, intNewVersion) {
	database.execSQL("DROP TABLE IF EXISTS timerecords");
	onCreate(database);        // Drop the tables if they exist, and then call 'onCreate'.
}




----------Using The Database In Your App----------


- OpenHelper is not a database, but it creates the database for you, and gives you access to it. 

- You need to call the 'getDatabase' method to retrive a reference to the SQLiteDatabase object. 

- once you have the SQLiteDatabase, you can call any of the methods to insert, delete, execute raw SQL statements, etc. 

- First, you need to get a reference to the database from the 'OpenHelper'.

- There are 2 methods you can call to retrive the database: getReadableDatabase (to retrieve a read only database) and getWritableDatabase (to retrieve a database you can read/write to).





