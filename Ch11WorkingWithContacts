Ch 11: Working With Device Contacts

- Using the native contact selection screen will keep the same flow, but you won't have to build it yourself. 

- Intents = A generic mechanism for invoking an action that the system can respond to. 

- You don't have to include a reference to an Activity in an Intent. 

- You can find extensive docs for the Uris and Actions you can pass into an Intent in the 'Intent online docs'.


- You need to create an Intent to select a contact from the contact list. 

Example: 

Intent (String action, Uri, uri);


- Uri (Uniform Resource Identifier) = a reference to data/resource on the device, while the Action says what to do with the data. 

- To make the types work with the constructor, you need to convert the string in a Uri object, using 'Uri.parse'.

Example: 

Uri contactUri = Uri.parse("content://com.android.contacts/contacts");



- Use constants when you can. 

- Add the 'READ_CONTACTS' permissinog to AndroidManifest.xml in order to access the contacts. 

Example: 

<user-permission android:name="android/permission.READ_CONTACTS" />


- ContentResolver = a utility class that you can use to query the contacts. 



----------Update the code to use a URI----------

- Update the 'renderContact' method to pass in the Uri. Update the 'onCreate' to call renderContact with a null Uri. And from onActivityResult, pass in the Uri from the Intent.

Example: 

private void renderContact(Uri uri) {       // Pass in the Uri
	TextView contactNameView = (TextView) findViewById(R.id.contact_name);
	TextView contactPhoneView = (TextView) findViewById(R.id.contact_phone);
	TextView contactPhotoView = (ImageView) findViewById(R.id.contact_photo);


	if (uri == null) {       // Check for a null Uri. If null, there must not be a contact.
		contactNameView.setText("Select a contact");
		contactPhoneView.setText("");
		contactPhotoView.setImageBitmap(null);
	} else {
		contactNameView.setText(getDisplayName(uri));
		contactPhoneView.setText(getMobileNumber(uri));
		contactPhotoView.setImageBitmap(getPhoto(uri));
	}

}



// Pass in a null Uri in 'onCreate'.

public void onCreate(Bundle savedInstance) {
	super.onCreate(savedInstance);
	setContentView(R.layout.main);
	renderContact(null);
}



// In 'onActivityResult', pass the Uri to renderContact.

protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
	if (requestCode == PICK_CONTACT_REQUEST) {
		if (resultCode == RESULT_OK) {
			renderContact(intent.getData());
		}
	}
}



// Stub methods to implement (ImCool.java): 

private String getDisplayName(Uri uri) {
	return null;
}


private String getMobileNumber(Uri uri) {
	return null;
}


private String getPhoto(Uri uri) {
	return null;
}



----------Query the Contacts----------

- You can retrieve the ContentResolver from your Activity using the Activity's getContentResolver method. 

Example: 

ContentResolver contentResolver = getContentResolver();


- Then, you can query the content provider, passing in the Uri returned from the Contact selection screen.

Cursor cur = getContentResolver().query(
	intent.getData,       // Pass in the data from the intent.
	null, null, null, null
);



----------Implement 'getMobilePhone'----------

- getMobilePhone method needs to query the contact details for the mobile phone associated with the selcted contact. 

Example: 

private String getMobilePhone(Uri uri) {
	String phoneNumber = null;
	
	Cursor phoneCursor = getContentResolver().query(
		uri, new String[] {ContactsContract.Contacts._ID}, null, null, null            // This will return only contacts ID
		);
	String id = null;
	if (contactCursor.moveToFirst()) {
		id = contactCursor.getString(
			contactCursor.getColumnIndex(ContactsContract.Contacts._ID));
	}
	
	contactCursor.close();
	

	Cursor phoneCursor = getContentResolve().query(
		ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
		new String[] { ContactsContract.CommonDataKinds.Phone.NUMBER },
		ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " ? = AND "
			+ ContactsContract.CommonDataKinds.Phone.TYPE + " = " 
			+ ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE,

		new String[] { id },        // Pass in the select statement and selection arguments to select only phone numbers for the seleved contact. 
		null
	);


	if (phoneCursor.moveToFirst()) {
		phoneNumber = phoneCursor.getString(phoneCursor.getColumnIndex(
			ContactsContract.CommonDataKinds.Phone.NUMBER)
		);
	}

	phoneCursor.close();

	return phoneNumber;
}



- You can refund results by adding a select value (?) 

Example: 

ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " =?"


- You also need to pass in an array of selection argument. The selection arguments will replace the '?' when the query is executed. 

Example: 

new String[] { id }



----------Showing the Photo----------

- There's a great helper method in 'ContactsContract.Contacts' called, 'openContactPhotoStream'. Pass in the ContentResolver and a Uri.

Example: 

private Bitmap getPhoto(Uri uri) {
	...
	...
	contactCursor.close();
		try {
			InputStream input = 
			ContactsContract.Contacts.openContactPhotoInputStream(         // Create an InputStream using the helper method.
			getContentResolver(),     
			ContentUris.withAppendedId(
				ContactsContract.Contacts.CONTENT_URI,
				new Long(id).longValue())
			);
		if (input != null) {
			photo = BitmapFactory.decodeStream(input);       // Use BitmapFactory to decode the stream into a real, live bitmap!
		}

		input.close();
	} catch (IOException iox) {
		/* exception handling here */
	}

	return photo;      // Return the photo bitmap.
}



- Lastly, just add the onClick method. 

Example: 
(In 'ImCool.xml')
android:onClick="onImOkButtonClick"
(In 'ImCool.java')
public void onImCoolButtonClick(View view) {
	// The code to send the text message
}



----------How to send a text message----------

There is a class called 'SmsManager' with a method that sends a text message. Just make sure to add the android permission (android.permission.SEND_SMS).

Example: 

sendTextMessage (
	String phoneNumber,
	String serviceCenterAddress,
	String text,
	PendingIntent sentIntent,
	PendingIntent deliveryIntent
)




